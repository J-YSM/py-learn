####################################################
# SETTING UP GITHUB FROM LOCAL REPO
#####################################################
# go to uninit folder
git init

# add them to staging
git add .

# commit staging files with message 
git commit -m "First Commit"

# copy remote repository URL (or local remote or remote server)
git remote add origin https://github.com/J-YSM/py-learn
# print all your remotes' fetch/push URLs
git remote -v

# push changes from local repository to GitHub(for all dir under master)
git push origin master

####################################################
# DAILY TASKS
#####################################################

# check all pushes with mesages
git reflog --date=iso

# show the differences between local and HEAD
git status
# add all/ one file to staging and commit and push
git add . / git add <filename>
git commit -m "misc...."
git push origin master

# show all pushed commits w messages
$ git log
$ git log --graph --all --decorate
git log --pretty=format:"%h %s" --graph

# pull single file from HEAD
git checkout <HEAD or branch version> <filepath with extension>
$ git checkout HEAD Learn-Python-The-Hard-Way/README.md

# pull single file after someone pushes to remote
$ git fetch
$ git checkout origin/master -- <folder/filename.ext>

# is HEAD pointing to master?
$ git symbolic-ref HEAD

# push changes from local repository to GitHub(for all dir under master)
git push origin master
# otherwise
git push origin

# revert to older branch
git log --oneline
git checkout <branch code first 7 letters e.g. 0c02914>
#revert to master
# OTHERWISE, HEAD is detached and not to master (aka latest branch), and cannot push
git checkout master

# retrieve a file from a older branch
git log --oneline
git checkout <branchname> -- .../filepath
git checkout 0c02914 -- README.md

# unstage staged changes
git reset

# compare local copy and remote copy
git fetch
git diff origin/master

# resolving unmerged files
git status --> u will see unmerged paths e.g. Cannot merge binary files
git pull --> not possible because of unmerge files
git add <filepath> && git commit -m "resolved merge conflicts"
git status --> no more unmerged paths
git pull --> Already up-to-date.

# save uncommitted changes

1. Commit them on the local branch.	
git commit -am "My descriptive message"

2. Commit them on another branch, no checkout conflicts.	
git checkout otherbranch && git commit -am "My descriptive message"

3. Commit them on another branch, conflicts.	
git stash; git checkout otherbranch; git stash apply; : "resolve conflicts"; git commit -am "My descriptive message"; git stash drop

4. Commit them on a new branch.	
git checkout -b newbranch; git commit -am "My descriptive message"

5. Stash them for a rainy day.	
git stash save "my descriptive name"

# undo last 2 uncommitted changes
git reset --hard HEAD~2

# undo git reset
git reflog
git reset --hard <branch>

#undo git add
git reset


# exit from (master|REBASE or MERGING) status
git rebase --abort

Rebasing is a common way to integrate upstream changes into your local repository. 
Sync your commits if you are ahead of origin after git fetch
# git push specific commit
git fetch
git rebase
git cheery-pick <SHA id from log>
git push

Rebasing to remove redundant commits u do not wish to push
git stash 
git rebase -i HEAD~3 # last 3 commits in log... p=pick, d=drop


# show branches
git show-branch --all

#setup new branch from remote server
net use 
git cd <new dir>
git init
git clone <path>\<foldername>


# when HEAD is ahead of MASTER and cannot Push
git checkout master
git merge <SHA id from log of fast forward HEAD>
git push origin master


# forking others' GIT repo
git remote -v
git remote add upstream <repo_clone_by_https_URL.git>
git fetch upstream
git merge upstream master --allow-unrelated-histories

# remove push/fetch URL remote
git remote remove <upstream where URL is incorrectly entered>

# resolve merge conflicts
git config merge.tool vimdiff
git config merge.conflictstyle diff3
git config mergetool.prompt false
git mergetool
git commit -m "Resolve merge conflict"
git clean

#####################################################################
# MergeTool help
#####################################################################

  +----------------------+
  |       |      |       |
  |LOCAL  |BASE  |REMOTE |
  |       |      |       |
  +----------------------+
  |      MERGED          |
  |                      |
  +----------------------+

LOCAL – this is file from the current branch

BASE – common ancestor, how file looked before both changes

REMOTE – file you are merging into your branch

MERGED – merge result, this is what gets saved in the repo

Navigate with 
<--Ctrl+W--> with j

If you want to get changes from REMOTE

:diffg RE  
If you want to get changes from BASE

:diffg BA  
If you want to get changes from LOCAL

:diffg LO 
Step 5. Save, Exit, Commit and Clean up

:wqa save and exit from vi

#####################################################################

# manage remotes and clones
git remote show
git remote show <origin or upstream>



####################################################
# update .gitignore
#####################################################

# rm all files
git rm -r --cached .
# add all files as per new .gitignore
git add .
# now, commit for new .gitignore to apply
git commit -m ".gitignore is now working"



####################################################
# ACCESS
#####################################################

# change from HTTPS to SSH
git remote set-url origin git@github.com:J-YSM/py-learn.git

# check git SSH key
$ eval "$(ssh-agent -s)"
$ ssh-add -l
# if agent no identities, generate new SSH key
# https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/
$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
$ ssh-add ~/.ssh/id_rsa
$ clip < ~/.ssh/id_rsa.pub 
# Copies the contents of the id_rsa.pub file to your clipboard


Justin@Justin-PC MINGW64 ~/Documents/GitHub/py-learn (master)
$ ssh-keygen -t rsa -b 4096 -C "yeoshuiming@gmail.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/Justin/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /c/Users/Justin/.ssh/id_rsa.
Your public key has been saved in /c/Users/Justin/.ssh/id_rsa.pub.

The key fingerprint is:
SHA256:asdbAx60pa2342323g23g23g8i0f7scHUYvo yeoshuiming@gmail.com
The key's randomart image is:
+---[RSA 4096]----+
|  . .   .        |
| . o . o .       |
|  o * + .        |
| . B * . s       |
|. o O . S        |
|o..X .   .       |
|+Oo.F            |
|X+== +           |
|BXO.R            |
+----[SHA256]-----+
Justin@Justin-PC MINGW64 ~/Documents/GitHub/py-learn (master)
$ ssh-add ~/.ssh/id_rsa
Identity added: /c/Users/Justin/.ssh/id_rsa (/c/Users/Justin/.ssh/id_rsa)

# try connecting with all keys
$ ssh -vT git@github.com


https://education.github.com/git-cheat-sheet-education.pdf



